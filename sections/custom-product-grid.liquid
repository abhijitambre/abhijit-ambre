{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
  .product-box{
    position:relative;
    overflow:hidden;
  }
  .product-img{
    position:relative;
    width:100%;
    z-index:7;
  }
.floating-btn {
    position: absolute;
    z-index: 9;
    top: {{ block.settings.top | default: 50 }}%; 
    left: {{ block.settings.left | default: 50 }}%; 
}


  .product-grid-custom{
    display: grid;
    grid-template-columns:{{ section.settings.items }};
    margin-bottom: 2rem;
    padding: 0;
    list-style: none;
    column-gap: var(--grid-desktop-horizontal-spacing);
    row-gap: var(--grid-desktop-vertical-spacing);
  }
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .modal-content {
    background-color: #fff;
    margin: 1% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 400px;
    border-radius: 10px;
    position:relative;
  }

  .close {
    color: #aaa;
    position:absolute;
    top:-10px;
    right:10px;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
  }

  .close:hover, .close:focus {
    color: #000;
    text-decoration: none;
  }
#color-options{
  display:grid;
  grid-template-columns:1fr 1fr;
} 
  .color-option{
    display:flex;
    border: 1px solid #ccc;
    
    cursor: pointer;
  }
  .color-option .color-strip{
    width:5%;
  }
  .color-option .color-variant{
    display: block;
    width:95%;
    margin: 0;
    padding: 10px 20px;
    
  }

  .color-option.active {
    background-color: #000;
    color: #fff;
  }
  .product-grid{
        display: grid;
    grid-template-columns: 1fr 1fr;
    gap:10px;
}
  .img-fluid{
    width:100%;
    height:auto;
  }
  .product-grid img{
    height: 150px;
    width: 100%;
    object-fit: cover;
  }
  .product-grid .title{
        font-size: 18px;
    line-height: 20px;
    margin:0 0 10px;
  }
  .product-grid p{
        font-size: 12px;
    line-height: 16px;
    margin:0 0 10px;
  }
  .product-grid .price{
        font-size: 18px;
    line-height: 20px;
    font-weight:600;
    margin:0 0 10px;
  }
{%- endstyle -%}

<div class="section-{{ section.id }}-padding gradient color-{{ section.settings.section_color_scheme }}">
  <div class="page-width testimonial-section">
    <div class="{% if section.settings.heading == blank %} no-heading{% endif %}">
      <div class="product-grid-custom">
        {%- for block in section.blocks -%}
          {% case block.type %}
            {% when 'productblock' %}
              <div class="product-block">
                {% assign product = all_products[block.settings.product_handle] %}
                {% if product %}
                  <div class="product-box">
                    <img src="{{ product.featured_image | img_url: 'medium' }}" class="product-img" alt="{{ product.title }}">
                    <a href="javascript:void(0);" class="floating-btn" data-handle="{{ product.handle }}"><img src="https://cdn.shopify.com/s/files/1/0719/2094/3342/files/Group_1000008188.png?v=1732266757"></a>
                  </div>
                {% else %}
                  <p>No product selected.</p>
                {% endif %}
              </div>
          {% endcase %}
        {%- endfor -%}
      </div>
    </div>
  </div>
</div>

<!-- Modal for Product Details -->
<div id="product-modal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <div id="modal-product-details">
      <!-- Product details will be dynamically loaded here -->
    </div>
  </div>
</div>


<!-- JavaScript -->
<script>
document.addEventListener('DOMContentLoaded', () => {
  const modal = document.getElementById('product-modal');
  const modalContent = document.getElementById('modal-product-details');
  const closeModal = document.querySelector('.modal .close');

  // Handle floating button click to open modal
  document.querySelectorAll('.floating-btn').forEach(button => {
    button.addEventListener('click', async function () {
      const productHandle = this.getAttribute('data-handle');

      try {
        const product = await fetch(`/products/${productHandle}.js`).then(res => res.json());

        // Extract unique options
        const sizeOptions = [...new Set(product.variants.map(v => v.option1))];
        const colorOptions = [...new Set(product.variants.map(v => v.option2))];

        // Generate HTML for options
        const colorsHtml = colorOptions
          .map(color => `<div class="color-option" data-value="${color}"><span class="color-strip" style="background-color:${color}"></span><span class="color-variant">${color}</span></div>`)
          .join('');

        const sizesHtml = sizeOptions
          .map(size => `<option value="${size}">${size}</option>`)
          .join('');

        // Populate modal content
        modalContent.innerHTML = `
          <div class="product-grid">
            <img src="${product.featured_image}" alt="${product.title}" class="img-fluid">
            <div>
              <h2 class="title">${product.title}</h2>
              <p class="price">$${(product.price / 100).toFixed(2)}</p>
              <p class="desc">${product.description}</p>
            </div>
          </div>
          <label for="colors">Choose a color:</label>
          <div id="color-options" class="color-options">${colorsHtml}</div>
          <label for="sizes">Choose a size:</label>
          <select id="sizes">${sizesHtml}</select>
          <button id="add-to-cart" data-id="${product.id}">Add to Cart</button>
        `;

        // Add event listener for color selection
        document.getElementById('color-options').addEventListener('click', event => {
          if (event.target.classList.contains('color-option')) {
            document.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('active'));
            event.target.classList.add('active');
          }
        });

        // Add event listener for adding to cart
        document.getElementById('add-to-cart').addEventListener('click', () => {
          const selectedColor = document.querySelector('.color-option.active')?.getAttribute('data-value');
          const selectedSize = document.getElementById('sizes').value;

          if (!selectedColor) {
            alert('Please select a color.');
            return;
          }

          const selectedVariant = product.variants.find(
            variant => variant.option1 === selectedSize && variant.option2 === selectedColor
          );

          if (!selectedVariant) {
            console.error('Variant not found. Available variants:', product.variants);
            alert('The selected combination does not exist.');
            return;
          }

          // Add to cart via Ajax
          fetch('/cart/add.js', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: selectedVariant.id, quantity: 1 })
          })
            .then(() => alert('Product added to cart'))
            .catch(() => alert('Error adding to cart'));
        });

        // Show modal
        modal.style.display = 'block';

      } catch (error) {
        console.error('Error fetching product:', error);
        modalContent.innerHTML = '<p>Product details could not be loaded.</p>';
      }
    });
  });

  // Close modal on close button click
  closeModal.addEventListener('click', () => {
    modal.style.display = 'none';
  });

  // Close modal on outside click
  window.addEventListener('click', event => {
    if (event.target === modal) {
      modal.style.display = 'none';
    }
  });
});
</script>

{% schema %}
{
  "name": "product-grid",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "inline_richtext",
      "id": "mainheading",
      "label": "mainheading"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h4",
          "label": "Small"
        },
        {
          "value": "h1",
          "label": "Medium"
        },
        {
          "value": "h0",
          "label": "Large"
        }
      ],
      "default": "h1",
      "label": "Heading Size"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    },
    {
        "type": "select",
        "id": "items",
        "options": [
          {
            "value": "1fr 1fr",
            "label": "2"
          }, 
          {
            "value": "1fr 1fr 1fr",
            "label": "3"
          },
          {
            "value": "1fr 1fr 1fr 1fr",
            "label": "4"
          },
          {
            "value": "1fr 1fr 1fr 1fr 1fr",
            "label": "5"
          }
        ],
        "default": "1fr 1fr 1fr",
        "label": "No of columns"
      },
    {
      "type": "color_scheme",
      "id": "section_color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.multirow.settings.container_color_scheme.label",
      "default": "scheme-1"
    }
  ],
  "blocks": [
    {
      "type": "productblock",
      "name": "Product Block",
      "settings": [
        {
          "type": "product",
          "id": "product_handle",
          "label": "Select Product"
        },
        {
          "type": "range",
          "id": "top",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%",
          "label": "Position from Top",
          "default": 50
        },
        {
          "type": "range",
          "id": "left",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%",
          "label": "Position from Left",
          "default": 50
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product Grid",
      "blocks": [
        {
          "type": "productblock"
        }
      ]
    }
  ]
}
{% endschema %}